c
updatable_address
n
c
updatable_address = current_user.addresses.find(params.require(:id))
updatable_address
updatable_address.update!(params_permit)
updatable_address = current_user.addresses.find(params.require(:id))
c
current_user.addresses.find(address_id)
current_user.addresses.find(9999)
current_user.addresses.find(5)
current_user.addresses
current_user
address_id
n
c
UserSerializer.addresses(current_user.addresses)
    address_list = current_user.addresses << AddressInformation.create!(params_permit)
c
current_user.addresses << AddressInformation.create!(params_permit)
AddressInformation.create! x
x
x = params.permit(:address1, :address2, :city, :name, :postal_code1)
AddressInformation.create! params.permit(:address1, :address2, :city, :name, :postal_code1)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.required([:address1, :city, :name, :postal_code1, :postal_code2])
params.require([:address1, :city, :name, :postal_code1, :postal_code2])
params.require(:address1, :city, :name, :postal_code1, :postal_code2)
        allowed_params = params.require(:address1, :city, :name, :postal_code1, :postal_code2).merge(params.permit(:address2, :phone_number))
AddressInformation.create!
current_user.addresses
AddressInformation.create!
current_user.addresses.count
current_user.addresses
        current_user.addresses << AddressInformation.create!(params_permit)
current_user.addresses
current_user.addresses << AddressInformation.last
AddressInformation.last
AddressInformation.create!(params_permit)
    def params_permit
        params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
    end
x = AddressInformation.create!(params_permit)
current_user.addresses
current_user
current_user.address << AddressInformation.create!(params_permit)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params
c
params
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2, :user_id)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2, :user_id).require(:user_id)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2).require(:user_id)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.require(:user_id).permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.permit('address1')
params.permit(:address1)
params.require(:user_id).permit(:address1)
params.require(:user_id)
params.require(user_id)
current_user.addresses
User.addresses
User.address
params
AddressInformation.create!(params)
current_user.addresses << AddressInformation.create!(params)
current_user.addresses
current_user
c
params
c
AddressInformation
AddressInformations
current_user.address_informations < {a: 'c'}
current_user.address_informations << {a: 'c'}
current_user.address_informations
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
user
current_user
c
 c
c
n
c
AddressInformation.find_or_create_by!(name: 'Recipient1', address1: 'Av. do Recipiente 3523', address2: '3o Dir Frente Lado', postal_code1: 2000, postal_code2: 231, city: 'Recipient - Ramada', phone_number: '1231')
n
admin_user
c
Rails.application.credentials.devise_jwt_secret_key
Rails.application.credentials.devise_jwt_secret_key!
Rails.application.credentials.jwt_secret
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.jwt_secret, true)
c
Rails.application.credentials.devise_jwt_secret_key!
request.headers['Authorization']
Bearer eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzYjM1MjM2NC01YWVlLTRkYTEtOTlkMy1kZjQ0NDQ3YjI4YzgiLCJzdWIiOiI3Iiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNzEzNzA5NTEyLCJleHAiOjE3MTM3MTEzMTJ9.G4ZPHA3T89xzY0TGW-_wENitOxuk_QyqKIKlc7Pdt6Y
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.devise_jwt_secret_key!)
Rails.application.credentials.devise_jwt_secret_key!
request.headers['Authorization'].split(' ').last
JWT.decode(request.headers['Authorization'].split(' ').last
 Rails.application.credentials.devise_jwt_secret_key!
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.devise_jwt_secret_key!).first 
request.headers['Authorization'].split(' ').last
Rails.application.credentials.devise_jwt_secret_key!
      jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.devise_jwt_secret_key!).first 
Rails.application.credentials.devise_jwt_secret_key!
request.headers['Authorization'].split(' ').last
JWT
c
params
jwt_payload
User.find(jwt_payload['sub'])
User.findjwt_payload['sub'])
current_user
c
auth_options
c
warden.authenticate!(auth_options)
auth_options
warden
    self.resource = warden.authenticate!(auth_options)
c
request
request.methods
request.attributes
request
request.content_type
request
json
params
c
     super { |resource| @resource = resource }
super { |resource|
   14:      @resource = resource }
resource
c
response[2]
response
n
result
env
n
result.first
result
n
current_user
user
result
env
params
n
params
old_config
n
payload
e
n
m
error
 payload[:status]
payload
n
method
target
n
c
n
response
n
result
n
result
n
handle
n
payload
n
target
n
renderer
n
params
c
current_user
c
current_user
c
User.last
User.last.sessions
User.last.session
User.last
User.first
Sessions
Session
user.attributes
user
current_user
user.jwt_payload
user
User.last.jwt_payload
User.last.methods
User.last
user.generate_jwt
user.jwt
user.jwt_subject
user.password_confirmation
user.methods
user
user.data
user
c
current_user
_opts
opts
current_user.data
current_user.password
current_user.passowrd
current_user.json
current_user
c
params
resource
c
resource.errors
current_user
resource
c
resource
c
params
c
params
resource
resource.persisted?
resource
c
resource.errors
c
resource.errors.first.message
