c
    recipient = current_user.orders.find(order_id).addresses.find(6)
current_user.orders.find(order_id).addresses.last.id
current_user.orders.find(order_id).addresses
    recipient = current_user.orders.find(order_id).addresses.find(id)
recipient = current_user.orders.find(order_id).addresses.find(id)
    recipient = current_user.orders.find(order_id).addresses
current_user.orders.find(order_id).find_by!(address: id)
current_user.orders.find(order_id).find_by!(id)
current_user.orders.find(order_id)
c
permitted_params.merge(addressable_type: 'Order', addressable_id: order_id)
AddressInformation.create(permitted_params).merge(addressable_type: 'Order', addressable_id: order_id)
c
 current_user.orders.find(id).destroy
c
current_user.orders.find(id).destroy
current_user.orders.find(id)
current_user.orders.find(id).
c
    updatable_address = current_user.addresses.find(params.require(:id))
c
current_user.addresses.last
    updatable_address = current_user.addresses.find(params.require(:id))
c
    updatable_address = current_user.addresses.find(params.require(:id))
c
    new_address = AddressInformation.create!(permitted_params)
permitted_params
    new_address = AddressInformation.create!(permitted_params)
c
current_user.addresses.select(valid_collumns).find(2)
current_user.addresses.select(valid_collumns).find(params.require(:id))
params.require(:id)
current_user.addresses.select(valid_collumns)
current_user.addresses
current_user
exit
Recipient
    AddressInformation.first
    AddressInformation
    recipient = current_user.orders.find(order_id).find_by!(id)
id
params
 params.require(:recipient_id)
order_id
params
current_user.orders.find(order_id)
current_user
current_ser
current_usere
current_user
c
current_user.addresses.first
current_user.addresses
c
generate_jwt
request.env['warden-jwt_auth.token']
jwt_authenticatable
headers
bearer
token
c
x = current_user.orders.find(params.require(:id))
x.destroy
x.methods
x = current_user.orders.find(params.require(:id))
current_user.orders.find(params.require(:id))
c
e.exception
e.methods
e.message
e.full_message
e.to_s
e.detailed_message
e.methods
e.record
e.methods
e.message
c
e
n
c
new_order
    new_order = Order.create!(create_order_params)
    create_order_params = permitted_params.merge(user_id: current_user.id)
Order    order_params = permitted_params.merge(user_id: current_user.id)
Order
current_user
Order.create!(permitted_params)
    order_params = permitted_params.merge(user_id: current_user.id)
Order.create!(permitted_params)
c
    current_user.orders << Order.create!(permitted_params)
    new_order = Order.create!(permitted_params)
permitted_params
c
new_order
n
current_user
c
current_user
c
c+
params
current_user
c
current_user
params
c
params
current_user
current_user.orders
c
current_user.orders
current_user.order
current_user.orders
current_user
c
updatable_address
n
c
updatable_address = current_user.addresses.find(params.require(:id))
updatable_address
updatable_address.update!(params_permit)
updatable_address = current_user.addresses.find(params.require(:id))
c
current_user.addresses.find(address_id)
current_user.addresses.find(9999)
current_user.addresses.find(5)
current_user.addresses
current_user
address_id
n
c
UserSerializer.addresses(current_user.addresses)
    address_list = current_user.addresses << AddressInformation.create!(params_permit)
c
current_user.addresses << AddressInformation.create!(params_permit)
AddressInformation.create! x
x
x = params.permit(:address1, :address2, :city, :name, :postal_code1)
AddressInformation.create! params.permit(:address1, :address2, :city, :name, :postal_code1)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.required([:address1, :city, :name, :postal_code1, :postal_code2])
params.require([:address1, :city, :name, :postal_code1, :postal_code2])
params.require(:address1, :city, :name, :postal_code1, :postal_code2)
        allowed_params = params.require(:address1, :city, :name, :postal_code1, :postal_code2).merge(params.permit(:address2, :phone_number))
AddressInformation.create!
current_user.addresses
AddressInformation.create!
current_user.addresses.count
current_user.addresses
        current_user.addresses << AddressInformation.create!(params_permit)
current_user.addresses
current_user.addresses << AddressInformation.last
AddressInformation.last
AddressInformation.create!(params_permit)
    def params_permit
        params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
    end
x = AddressInformation.create!(params_permit)
current_user.addresses
current_user
current_user.address << AddressInformation.create!(params_permit)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params
c
params
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2, :user_id)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2, :user_id).require(:user_id)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2).require(:user_id)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.require(:user_id).permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.permit(:address1, :address2, :city, :name, :postal_code1, :postal_code2)
params.permit('address1')
params.permit(:address1)
params.require(:user_id).permit(:address1)
params.require(:user_id)
params.require(user_id)
current_user.addresses
User.addresses
User.address
params
AddressInformation.create!(params)
current_user.addresses << AddressInformation.create!(params)
current_user.addresses
current_user
c
params
c
AddressInformation
AddressInformations
current_user.address_informations < {a: 'c'}
current_user.address_informations << {a: 'c'}
current_user.address_informations
c
current_user
c
current_user
c
current_user
c
current_user
c
current_user
user
current_user
c
 c
c
n
c
AddressInformation.find_or_create_by!(name: 'Recipient1', address1: 'Av. do Recipiente 3523', address2: '3o Dir Frente Lado', postal_code1: 2000, postal_code2: 231, city: 'Recipient - Ramada', phone_number: '1231')
n
admin_user
c
Rails.application.credentials.devise_jwt_secret_key
Rails.application.credentials.devise_jwt_secret_key!
Rails.application.credentials.jwt_secret
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.jwt_secret, true)
c
Rails.application.credentials.devise_jwt_secret_key!
request.headers['Authorization']
Bearer eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIzYjM1MjM2NC01YWVlLTRkYTEtOTlkMy1kZjQ0NDQ3YjI4YzgiLCJzdWIiOiI3Iiwic2NwIjoidXNlciIsImF1ZCI6bnVsbCwiaWF0IjoxNzEzNzA5NTEyLCJleHAiOjE3MTM3MTEzMTJ9.G4ZPHA3T89xzY0TGW-_wENitOxuk_QyqKIKlc7Pdt6Y
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.devise_jwt_secret_key!)
Rails.application.credentials.devise_jwt_secret_key!
request.headers['Authorization'].split(' ').last
JWT.decode(request.headers['Authorization'].split(' ').last
 Rails.application.credentials.devise_jwt_secret_key!
c
jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.devise_jwt_secret_key!).first 
request.headers['Authorization'].split(' ').last
Rails.application.credentials.devise_jwt_secret_key!
      jwt_payload = JWT.decode(request.headers['Authorization'].split(' ').last,
                               Rails.application.credentials.devise_jwt_secret_key!).first 
Rails.application.credentials.devise_jwt_secret_key!
request.headers['Authorization'].split(' ').last
JWT
c
params
jwt_payload
User.find(jwt_payload['sub'])
User.findjwt_payload['sub'])
current_user
c
auth_options
c
warden.authenticate!(auth_options)
auth_options
warden
    self.resource = warden.authenticate!(auth_options)
